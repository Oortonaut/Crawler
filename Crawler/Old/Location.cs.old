namespace Crawler;


public static partial class CrawlerEx {
    public static double Blend(this double t, double a, double b) => a + ( b - a ) * t;
}

public abstract class EncounterBase {
    public string Name { get; set; } = string.Empty;
    public string Hint { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public abstract IEnumerable<string> GetOptions();
    public abstract void HandleOption(string option);
    public abstract string Tick(Location where);
    public abstract string Look();
}

public class LocationSpec: ISpecRecord {
    public string UniqueKey => Name;
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
}
public class Location(LocationSpec spec) {
    public Location(LocationSpec spec, double latitude, double longitude): this(spec) {
        Latitude = latitude;
        Longitude = longitude;
    }
    // Locations
    public double Latitude { get; set; } // 0 is under the eye
    public double Longitude { get; set; } // 0 degrees faces east
    public double Temp {
        get {
            double t = Math.Cos(Latitude * Math.PI / 180);
            double hot = t.Blend(280, 340);
            double cold = 85;
            double kneeRadius = 0.1;
            double kneeT = Math.Clamp(t / kneeRadius, -1, 1) * 0.5 + 0.5;
            return kneeT.Blend(cold, hot);
        }
    }

    public virtual string Description => Spec.Description + ("\n" + ActiveEncounter?.Description ?? string.Empty);
    public virtual string Hint => ActiveEncounter != null ? ActiveEncounter.Hint : string.Empty;

    public List<Location> Neighbors { get; set; } = new();
    public LocationSpec Spec { get; set; } = spec;

    public void Link(Location other) {
        _Link(other);
        other._Link(this);
    }
    void _Link(Location other) {
        Neighbors.Add(other);
    }

    public EncounterBase? ActiveEncounter { get; set; } = null;
    public string Look() {
        string result = $"You are in {LocationString}";
        string area = $"TEMP {Temp:G3}K Around you:";
        foreach (var neighbor in Neighbors) {
            area += $"\n{Direction(neighbor)}: {neighbor} {neighbor.Hint}";
        }

        return string.Join("\n", [result, Description, area]);
    }

    public string Direction(Location other) {
        double dLatitude = other.Latitude - Latitude;
        double dLongitude = other.Longitude - Longitude;
        if (dLongitude < -180) dLongitude += 360;
        if (dLongitude > 180) dLongitude -= 360;
        dLongitude *= Math.Sin(Latitude * Math.PI / 180);
        double angle = Math.Atan2(dLongitude, dLatitude) / Math.Tau * 8;
        if (angle < 0) angle += 8;
        if (angle < 0.5 || angle >= 7.5) {
            return "Belt";
        } else if (angle < 1.5) {
            return "Upbelt";
        } else if (angle < 2.5) {
            return "Up";
        } else if (angle < 3.5) {
            return "Upeye";
        } else if (angle < 4.5) {
            return "Eye";
        } else if (angle < 5.5) {
            return "Downeye";
        } else if (angle < 6.5) {
            return "Down";
        } else { // if (angle < 7.5) {
            return "Downbelt";
        }
    }
    public IEnumerable<string> GetOptions() {
        return Enumerable.Empty<string>();
    }
    public void HandleOption(string option) { }

    public override string ToString() => $"{Spec.Name} @{Latitude}, {Longitude}";
    public string LocationString {
        get {
            string result = ToString();
            double L = Latitude / 10;
            int I = ( int ) L;
            I = Math.Clamp(I, 0, LatitudeStrings.Length - 1);
            result += "\n" + LatitudeStrings[I];
            return result;
        }
    }
    static string[] LatitudeStrings = [
        // 0 - 10 degrees away from the substellar point
        "Scalding water beats down on you in the heart of the Eye's Anger.\nThe storm hides the world and the Eye itself is invisible.",
        // 10-20
        "On the outskirts of the Eye's Anger, heavy rain pours and the red glow of the Eye\n dims beneath the storm's height.",
        // 20-30
        "The raging storm tower of the substellar point begins to peek above the horizon.\nThe hot glare of the Eye above is blinding through the thin clouds.",
        // 30-40
        "The Eye observes, watches, motionless. A breeze stirs the dust.",
        // 40-50
        "The land is warm, the skies are clear. The Eye's winds scour the lanscape.",
        // 50 - 60
        "The land is warm, the skies are clear. The Eye's winds scour the lanscape.",
        // 60 - 70
        "The cool red glow of the Eye gives little and asks little in return. The wind grows cold.",
        // 70-80
        "Signs of the storm wall begin to show on the horizon. The Eye's power grows weak.",
        // 80-90
        "You are near the storm wall. Gouts of ice and air blow upward as the winds from the eye meet the storm.",

        "It is so very cold and dark.",
    ];
}
