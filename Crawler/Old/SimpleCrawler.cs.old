namespace Crawler {
    public enum SimpleSize {
        Small, Medium, Large,
    }
    public enum TurretType {
        Guns,
        Lasers,
        Missiles,
    }
    public enum PartQuality {
        Broken = -2,
        Weak,
        Average,
        Strong,
        Superior,
    }
    public enum DamageEvent {
        Miss,
        Soak,
        Hit,
        Disabled,
        Destroyed, // Give it up, son. It's gone.
    }
    public enum RepairEvent {
        NothingToDo,
        Enabled, // Disabled to enabled
        Finished, // enabled to undamaged
        Impossible,
        Repaired, // some improvement
    }
    public enum SegmentSide {
        Outside,
        Protected,
        Inside,
    }
    public abstract class Thing {
        public int Armor { get; protected set; } = 0;
        public int Damage { get; protected set; } = 0;
        public int DamageToDisable { get; protected set; } = 1;
        public int DamageToDestroy { get; protected set; } = 2;
        public DamageEvent TryHit(int hitChance, int damage, bool ignoreArmor = false) {
            if (Random.Shared.NextDouble() >= Math.Min(hitChance * 0.01, 1)) {
                return DamageEvent.Miss;
            } else {
                return ApplyDamage(damage, ignoreArmor);
            }
        }
        public DamageEvent ApplyDamage(int damage, bool ignoreArmor = false) {
            if (!ignoreArmor) {
                damage -= Armor;
            }
            if (damage <= 0) {
                return DamageEvent.Soak;
            }
            bool WasDisabled = IsDisabled;
            bool WasDestroyed = IsDestroyed;
            Damage += damage;
            if (!WasDestroyed && IsDestroyed) {
                return DamageEvent.Destroyed;
            }
            if (!WasDisabled && IsDisabled) {
                return DamageEvent.Disabled;
            }
            return DamageEvent.Hit;
        }
        public RepairEvent Repair(int repair) {
            if (IsDestroyed) {
                return RepairEvent.Impossible;
            }
            if (Damage == 0) {
                return RepairEvent.NothingToDo;
            }
            bool WasDisabled = IsDisabled;
            Damage -= repair;
            if (Damage <= 0) {
                Damage = 0;
                return RepairEvent.Finished;
            }
            if (WasDisabled && !IsDisabled) {
                return RepairEvent.Enabled;
            }
            return RepairEvent.Repaired;
        }
        public virtual string Description => string.Empty;
        public virtual bool CanHold(Thing other) => true;
        public bool IsDestroyed => Damage >= DamageToDestroy;
        public bool IsDisabled => Damage >= DamageToDisable || IsDestroyed;
    }
    public abstract class Part: Thing {
        public int Space { get; set; } = 1;
        public SegmentSide Side { get; set; } = SegmentSide.Inside;
    }
    public struct GunState {
        public GunState(Gun gun) {
            Gun = gun;
            Name = string.Empty;
            Range = Gun.BaseRange;
            Damage = Gun.BaseDamage;
            Rate = Gun.BaseRate;

            AdjustForType(this);
            AdjustForSize(this);
            AdjustForCondition(this);
            foreach (var affix in Gun.Affixes) {
                affix(this);
            }
        }
        public Gun Gun;
        public string Name;
        public double Range;
        public double Damage;
        public double Rate;

        public static void AdjustForType(GunState state) {
            var type = state.Gun.Type;
            state.Name = $"{type} {state.Name}";
            // Type doesn't affect direct DPS, so we adjust the damage along with the rate
            switch (type) {
            case TurretType.Guns:
                break;
            case TurretType.Lasers:
                state.Range /= TypeRangeScale;
                state.Damage *= TypeDamageScale;
                break;
            case TurretType.Missiles:
                state.Range *= TypeRangeScale;
                state.Damage /= TypeDamageScale;
                break;
            }
            double rateScale = TypeRateScale[( int ) type];
            state.Damage /= rateScale;
            state.Rate *= rateScale;
        }
        // Type trades off between range and damage
        public const double TypeRangeScale = 1.73205;
        public const double TypeDamageScale = 1.4142;
        public static double[] TypeRateScale = [1, 1.75, 0.5];

        // Size boosts range and damage at the expense of rate of fire
        public static void AdjustForSize(GunState state) {
            var size = state.Gun.Size;
            state.Name = $"{size} {state.Name}";
            state.Range *= Math.Pow(SizeRangeScale, (double)size);
            double DamageScale = Math.Pow(SizeDamageScale, (double)size);
            state.Damage *= DamageScale;
            state.Rate *= SizeDPSScale[(int)size] / DamageScale;
        }
        public const double SizeRangeScale = 1.5;
        public const double SizeDamageScale = 2.0;
        public static double[] SizeDPSScale = [1, 1.75, 2.5];

        public static void AdjustForCondition(GunState state) {
            var condition = state.Gun.PartQuality;
            state.Name = $"{condition} {state.Name}";
            double baseNum = ConditionCurveOffset;
            double k = Math.Log(baseNum + (double)condition) / Math.Log(baseNum + (double)PartQuality.Average);
            state.Range *= k;
            state.Damage *= k;
            state.Rate *= k;
        }
        public const double ConditionCurveOffset = 10.0;
    }
    public class Gun: Part {
        public Gun(SegmentSide side = SegmentSide.Outside) {
            Armor = 1;
            Damage = 0;
            DamageToDisable = 1;
            DamageToDestroy = 2;
            Space = 1;
            Side = side;
        }
        public SimpleSize Size { get; set; } = SimpleSize.Small;
        public TurretType Type { get; set; } = TurretType.Guns;
        public PartQuality PartQuality { get; set; } = PartQuality.Average;
        //public List<GunAffix> Affixes { get; set; } = new();
        public List<Action<GunState>> Affixes { get; set; } = new();
        public GunState State => new(this);
        public const double BaseRange = 100.0;
        public const double BaseDamage = 10.0;
        public const double BaseRate = 1.0;
    }
    public class SimpleSegment: Thing {
        public SimpleSegment(int outsideParts, int protectedParts, int insideParts) {
            Armor = 1;
            Damage = 0;
            DamageToDisable = 3;
            DamageToDestroy = 4;
            OutsideParts = new Part?[outsideParts];
            ProtectedParts = new Part?[protectedParts];
            InsideParts = new Part?[insideParts];
        }
        // Damage reduction
        public Part?[] OutsideParts { get; set; }
        public Part?[] ProtectedParts { get; set; }
        public Part?[] InsideParts { get; set; }
    }
    public class SimpleCrawler: Thing {
        public string Name { get; set; } = string.Empty;
    }
}
