using Crawler.Logging;

namespace Crawler;

public enum Immediacy {
    Disabled,
    Menu,
    Immediate, // Perform now
}

/// <summary>
/// Concrete action that can be performed. Generated by IProposal.
/// </summary>
public interface IInteraction {
    /// <summary>Can this interaction be performed right now?</summary>
    Immediacy Immediacy(string args = "");

    /// <summary>Execute the interaction. Returns AP cost (0 for instant).</summary>
    int Perform(string args = "");

    /// <summary>Display message for viewer. Primarily used for customs and extortion demands.</summary>
    string? MessageFor(IActor viewer);

    /// <summary>Display description for menus</summary>
    string Description { get; }

    /// <summary>Shortcut key code (e.g., "T" for trade, "DA" for demand accept)</summary>
    string OptionCode { get; }
}

// Simple consequence: mark as hostile
public record HostilityInteraction(IActor Agent, IActor Subject, string Reason): IInteraction {
    public Immediacy Immediacy(string args = "") => global::Crawler.Immediacy.Menu;
    public int Perform(string args = "") {
        Agent.To(Subject).Hostile = true;
        Subject.To(Agent).Hostile = true;
        Agent.Message($"{Subject.Name} {Reason}. You are now hostile.");
        Subject.Message($"{Agent.Name} turns hostile because you {Reason.Replace("refuses", "refused")}!");
        Subject.Supplies[Commodity.Morale] -= 2;
        return 1;
    }
    public string? MessageFor(IActor viewer) => null;
    public string Description => $"Turn hostile against {Subject.Name}";
    public string OptionCode => "H";
}

public record ExchangeInteraction: IInteraction {
    public ExchangeInteraction(IActor agent,
        IOffer agentOffer,
        IActor subject,
        IOffer subjectOffer,
        string optionCode,
        string? description = null,
        Immediacy mode = global::Crawler.Immediacy.Menu) {
        Agent = agent;
        AgentOffer = agentOffer;
        Subject = subject;
        SubjectOffer = subjectOffer;
        OptionCode = optionCode;
        Description = description ?? MakeDescription();
        _mode = mode;
    }
    public IActor Agent { get; init; }
    public IActor Subject { get; init; }
    readonly Immediacy _mode;

    public Immediacy Immediacy(string args = "") {
        bool aoe = AgentOffer.EnabledFor(Agent, Subject);
        bool soe = SubjectOffer.EnabledFor(Subject, Agent);

        using var activity = LogCat.Interaction.StartActivity(nameof(Immediacy));
        activity?.SetTag("interaction.description", Description);
        activity?.SetTag("agent.name", Agent.Name);
        activity?.SetTag("subject.name", Subject.Name);
        activity?.SetTag("agent.offer.enabled", aoe);
        activity?.SetTag("subject.offer.enabled", soe);

        if (aoe && soe) {
            activity?.SetTag("mode", _mode.ToString());
            return _mode;
        } else {
            var failures = new List<string>();
            if (!aoe) failures.Add("Agent");
            if (!soe) failures.Add("Subject");
            activity?.SetTag("mode", "Disabled");
            activity?.SetTag("failures", string.Join(", ", failures));
            return global::Crawler.Immediacy.Disabled;
        }
    }

    public int Perform(string args = "") {
        int count = 1;
        if (!string.IsNullOrWhiteSpace(args) && int.TryParse(args, out int parsed)) {
            count = Math.Max(1, parsed);
        }

        int performed = 0;
        for (int i = 0; i < count; i++) {
            if (Immediacy() == global::Crawler.Immediacy.Disabled) {
                break;
            }
            AgentOffer.PerformOn(Agent, Subject);
            SubjectOffer.PerformOn(Subject, Agent);
            performed++;
        }

        if (performed > 0) {
            Agent.Message($"You gave {Subject.Name} {AgentOffer.Description} and got {SubjectOffer.Description} in return. (x{performed})");
            Subject.Message($"You gave {Agent.Name} {SubjectOffer.Description} and got {AgentOffer.Description} in return. (x{performed})");
        }
        return performed;
    }
    public string Description { get; init; }
    public override string ToString() => Description;
    public IOffer AgentOffer { get; init; }
    public IOffer SubjectOffer { get; init; }
    public string OptionCode { get; init; }
    public string MakeDescription() {
        // Note: Can't access Value here without Agent binding
        var buyerDesc = AgentOffer.Description;
        var sellerDesc = SubjectOffer.Description;
        if (AgentOffer is EmptyOffer) {
            return $"{sellerDesc}";
        } else if (SubjectOffer is EmptyOffer) {
            return $"{buyerDesc}";
        } else if (AgentOffer is ScrapOffer) {
            return $"Sell {sellerDesc} for {buyerDesc}";
        } else if (SubjectOffer is ScrapOffer) {
            return $"Buy {buyerDesc} for {sellerDesc}";
        }
        return $"Give {sellerDesc} for {buyerDesc}";
    }

    public string? MessageFor(IActor viewer) => null;
}
