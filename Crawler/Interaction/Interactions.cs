namespace Crawler;

public enum InteractionMode {
    Disabled,
    Menu,
    Immediate, // Perform now
}

/// <summary>
/// Concrete action that can be performed. Generated by IProposal.
/// </summary>
public interface IInteraction {
    /// <summary>Can this interaction be performed right now?</summary>
    InteractionMode Enabled(string args = "");

    /// <summary>Execute the interaction. Returns AP cost (0 for instant).</summary>
    int Perform(string args = "");

    /// <summary>Display message for viewer. Primarily used for customs and extortion demands.</summary>
    string? MessageFor(IActor viewer);

    /// <summary>Display description for menus</summary>
    string Description { get; }

    /// <summary>Shortcut key code (e.g., "T" for trade, "DA" for demand accept)</summary>
    string OptionCode { get; }
}

// Simple consequence: mark as hostile
public record HostilityInteraction(IActor Agent, IActor Subject, string Reason): IInteraction {
    public InteractionMode Enabled(string args = "") => InteractionMode.Menu;
    public int Perform(string args = "") {
        Agent.To(Subject).Hostile = true;
        Subject.To(Agent).Hostile = true;
        Agent.Message($"{Subject.Name} {Reason}. You are now hostile.");
        Subject.Message($"{Agent.Name} turns hostile because you {Reason.Replace("refuses", "refused")}!");
        Subject.Inv[Commodity.Morale] -= 2;
        return 1;
    }
    public string? MessageFor(IActor viewer) => "";
    public string Description => $"Turn hostile against {Subject.Name}";
    public string OptionCode => "H";
}

public record AttackInteraction(IActor _attacker, IActor Defender): IInteraction {
    public InteractionMode Enabled(string args = "") => InteractionMode.Menu;
    public int Perform(string args = "") {
        var attacker = _attacker as Crawler;
        attacker!.Attack(Defender);
        return 1;
    }
    public string? MessageFor(IActor viewer) => "";
    public string Description => $"Attack {Defender}";
    public string OptionCode => "A";
}

public record ExchangeInteraction: IInteraction {
    public ExchangeInteraction(IActor agent,
        IOffer agentOffer,
        IActor subject,
        IOffer subjectOffer,
        string optionCode,
        string? description = null) {
        Agent = agent;
        AgentOffer = agentOffer;
        Subject = subject;
        SubjectOffer = subjectOffer;
        OptionCode = optionCode;
        Description = description ?? MakeDescription();
    }
    public IActor Agent { get; init; }
    public IActor Subject { get; init; }

    public InteractionMode Enabled(string args = "") {
        return AgentOffer.EnabledFor(Agent, Subject) &&
               SubjectOffer.EnabledFor(Subject, Agent)
            ? InteractionMode.Menu
            : InteractionMode.Disabled;
    }

    public int Perform(string args = "") {
        int count = 1;
        if (!string.IsNullOrWhiteSpace(args) && int.TryParse(args, out int parsed)) {
            count = Math.Max(1, parsed);
        }

        int performed = 0;
        for (int i = 0; i < count; i++) {
            if (Enabled() == InteractionMode.Disabled) {
                break;
            }
            AgentOffer.PerformOn(Agent, Subject);
            SubjectOffer.PerformOn(Subject, Agent);
            performed++;
        }

        if (performed > 0) {
            Agent.Message($"You gave {Subject.Name} {AgentOffer.Description} and got {SubjectOffer.Description} in return. (x{performed})");
            Subject.Message($"You gave {Agent.Name} {SubjectOffer.Description} and got {AgentOffer.Description} in return. (x{performed})");
        }
        return performed;
    }
    public string Description { get; init; }
    public override string ToString() => Description;
    public IOffer AgentOffer { get; init; }
    public IOffer SubjectOffer { get; init; }
    public string OptionCode { get; init; }
    public string MakeDescription() {
        // Note: Can't access Value here without Agent binding
        var buyerDesc = AgentOffer.Description;
        var sellerDesc = SubjectOffer.Description;
        if (AgentOffer is EmptyOffer) {
            return $"{sellerDesc}";
        } else if (SubjectOffer is EmptyOffer) {
            return $"{buyerDesc}";
        } else if (AgentOffer is ScrapOffer) {
            return $"Sell {sellerDesc} for {buyerDesc}";
        } else if (SubjectOffer is ScrapOffer) {
            return $"Buy {buyerDesc} for {sellerDesc}";
        }
        return $"Give {sellerDesc} for {buyerDesc}";
    }

    public string? MessageFor(IActor viewer) => "";
}

public record AcceptDemandInteraction(
    IActor Agent,
    IActor Subject,
    IOffer Demand,
    string Ultimatum,
    IProposal Proposal): IInteraction {

    public InteractionMode Enabled(string args = "") =>
        Demand.EnabledFor(Subject, Agent) ? InteractionMode.Immediate : InteractionMode.Disabled;

    public int Perform(string args = "") {
        Demand.PerformOn(Subject, Agent);
        Subject.Message($"You comply with {Agent.Name}'s demand and give {Demand.Description}.");
        Agent.Message($"{Subject.Name} complies with your demand.");

        // Expire the proposal
        if (Proposal is ProposeExtortion pe) pe.ExpirationTime = -1;
        else if (Proposal is ProposeTaxes pt) pt.ExpirationTime = -1;
        else if (Proposal is ProposeContrabandSeizure pcs) pcs.ExpirationTime = -1;
        return 1;
    }

    public string? MessageFor(IActor viewer) =>
        viewer == Subject ? Ultimatum : "";

    public string Description => $"Accept: {Ultimatum}";
    public string OptionCode => "DA";
}

public record RefuseDemandInteraction(
    IActor Agent,
    IActor Subject,
    IInteraction Consequence,
    string Ultimatum,
    IProposal Proposal): IInteraction {

    public InteractionMode Enabled(string args = "") => InteractionMode.Immediate;

    public int Perform(string args = "") {
        Subject.Message($"You refuse {Agent.Name}'s demand!");
        Agent.Message($"{Subject.Name} refuses your demand!");

        // Expire the proposal
        if (Proposal is ProposeExtortion pe) pe.ExpirationTime = -1;
        else if (Proposal is ProposeTaxes pt) pt.ExpirationTime = -1;
        else if (Proposal is ProposeContrabandSeizure pcs) pcs.ExpirationTime = -1;

        if (Consequence.Enabled() != InteractionMode.Disabled) {
            Consequence.Perform();
        }
        return 1;
    }

    public string? MessageFor(IActor viewer) =>
        viewer == Subject ? Ultimatum : "";

    public string Description => $"Refuse: {Ultimatum}";
    public string OptionCode => "DR";
}

public record ContrabandInteraction(
    IActor Agent,
    IActor Subject,
    Inventory Contraband,
    float PenaltyAmount,
    string Ultimatum,
    IProposal Proposal): IInteraction {

    public InteractionMode Enabled(string args = "") => InteractionMode.Immediate;

    public int Perform(string args = "") {
        // "pay" means pay the fine, otherwise surrender contraband
        bool payFine = args.Equals("pay", StringComparison.OrdinalIgnoreCase);

        if (payFine && Subject.Inv[Commodity.Scrap] >= PenaltyAmount) {
            // Pay the fine
            Subject.Inv[Commodity.Scrap] -= PenaltyAmount;
            Agent.Inv[Commodity.Scrap] += PenaltyAmount;
            Subject.Message($"You pay {PenaltyAmount:F0}¢¢ fine to {Agent.Name} and keep your contraband.");
            Agent.Message($"{Subject.Name} pays the fine.");
            if (Proposal is ProposeContrabandSeizure pcs) pcs.ExpirationTime = -1;
            return 1;
        } else if (!payFine && Subject.Inv.Contains(Contraband)) {
            // Surrender contraband
            Subject.Inv.Remove(Contraband);
            Agent.Inv.Add(Contraband);
            Subject.Message($"You surrender {Contraband} to {Agent.Name}.");
            Agent.Message($"{Subject.Name} surrenders contraband.");
            if (Proposal is ProposeContrabandSeizure pcs) pcs.ExpirationTime = -1;
            return 1;
        } else {
            // Can't comply - turn hostile
            Subject.Message($"You can't comply with {Agent.Name}'s demands! They turn hostile.");
            Agent.Message($"{Subject.Name} can't comply. Turning hostile.");
            Agent.To(Subject).Hostile = true;
            Subject.To(Agent).Hostile = true;
            Subject.Inv[Commodity.Morale] -= 3;
            if (Proposal is ProposeContrabandSeizure pcs) pcs.ExpirationTime = -1;
            return 1;
        }
    }

    public string? MessageFor(IActor viewer) =>
        viewer == Subject ? Ultimatum : "";

    public string Description => $"{Ultimatum}";
    public string OptionCode => "C";
}
